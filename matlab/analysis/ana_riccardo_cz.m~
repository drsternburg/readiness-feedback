%% preprocess
subj_code = 'VPfaf';
%Train the RP_Classifier with Cz, c1 and c2 only
opt.cfy_rp.clab = {'Cz', 'C1', 'C2'};
rfb_preprocessing(subj_code,'Phase1');
 
%% Get the phase1 COut
rfb_quickInspection(subj_code)

%% Get the phase2 COut using the classifier from phase1
%% First preprocess the Phase 2 data, so that it can have registered onset
rfb_preprocessing(subj_code,'Phase2');

%% Making epo for phase2
[mrk,cnt,mnt] = rfb_loadData(subj_code,'Phase2');
trial_mrk = rfb_getTrialMarkers(mrk);
trial_mrk = trial_mrk(cellfun(@length,trial_mrk)==5);
mrk = mrk_selectEvents(mrk,[trial_mrk{:}]);
mrk = mrk_selectClasses(mrk,{'movement onset'});

%% Get COuts from phase2 based on the classifier on phase1
cnt_xv = proc_selectChannels(cnt,opt.cfy_rp.clab);
fv = proc_segmentation(cnt_xv,mrk,opt.cfy_rp.fv_window);
fv = proc_baseline(fv,opt.cfy_rp.ival_baseln);
fv = proc_jumpingMeans(fv,opt.cfy_rp.ival_fv);
fv = proc_flaten(fv);


cout_phase2 = apply_separatingHyperplane(opt.cfy_rp.C, fv.x).';

%% Preproceess phase22
rfb_preprocessing(subj_code,'Phase22');


%% Now for phase22
[mrk,cnt,mnt] = rfb_loadData(subj_code,'Phase22');
trial_mrk = rfb_getTrialMarkers(mrk);
trial_mrk = trial_mrk(cellfun(@length,trial_mrk)==5);
mrk = mrk_selectEvents(mrk,[trial_mrk{:}]);
mrk = mrk_selectClasses(mrk,{'movement onset'});

%% Get COuts from phase2 based on the classifier on phase1
cnt_xv = proc_selectChannels(cnt,opt.cfy_rp.clab);
fv = proc_segmentation(cnt_xv,mrk,opt.cfy_rp.fv_window);
fv = proc_baseline(fv,opt.cfy_rp.ival_baseln);
fv = proc_jumpingMeans(fv,opt.cfy_rp.ival_fv);
fv = proc_flaten(fv);

cout_phase2 = vertcat(cout_phase2, apply_separatingHyperplane(opt.cfy_rp.C, fv.x).');

cout_block1 = cout_phase2(1:25);
cout_block2 = cout_phase2(25:50);
cout_block3 = cout_phase2(50:75);
cout_block4 = cout_phase2(75:100);
cout_block5 = cout_phase2(100:125);
cout_block6 = cout_phase2(125:150);


%% Compare cout phase 1 and phase2
h1 = histfit(opt.feedback.pyff_params(3).phase1_cout.');
set(h1(1),'FaceAlpha', 0.5);
hold on
h2 = histfit(cout_phase2);
set(h2(1),'FaceAlpha', 0.5);
l=legend([h1(1) h2(1) ],'phase1','phase2');

%% box plots blocks
x = [cout_block2; cout_block3; cout_block4; cout_block5; cout_block6];
g = [ones(size(cout_block2)); ones(size(cout_block2)); ones(size(cout_block2));];

